rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ===== PRODUCTS =====
    match /products/{productId} {
      // Data validation
      allow create: if isAdmin() && isValidProduct();
      allow update: if isAdmin() && isValidProductUpdate();
      allow delete: if isAdmin();
      allow read: if true; // Public read access
      
      // Product data structure validation
      function isValidProduct() {
        return request.resource.data.keys().hasAll([
          'name',
          'price',
          'category',
          'stock'
        ]) &&
        request.resource.data.name is string &&
        request.resource.data.price is number &&
        request.resource.data.category in ['boys', 'girls'] &&
        request.resource.data.stock is number &&
        request.resource.data.stock >= 0;
      }
      
      function isValidProductUpdate() {
        return isValidProduct() && 
               // Prevent category changes
               request.resource.data.category == resource.data.category;
      }
    }

    // ===== CARTS =====
    match /carts/{userId} {
      allow read, write: if isUser(userId) && isValidCartItem();
      
      function isValidCartItem() {
        return request.resource.data.keys().hasAll([
          'productId',
          'quantity',
          'size',
          'color'
        ]) &&
        request.resource.data.quantity is number &&
        request.resource.data.quantity > 0 &&
        request.resource.data.quantity <= 10 && // Max 10 per item
        exists(/databases/$(database)/documents/products/$(request.resource.data.productId));
      }
    }

    // ===== ORDERS ===== 
    match /orders/{orderId} {
      allow create: if isLoggedIn() && isValidOrder();
      allow read: if isUser(resource.data.userId) || isAdmin();
      allow update: if isAdmin(); // Only admins can update order status
      allow delete: if false; // No deletions allowed
      
      function isValidOrder() {
        return request.resource.data.keys().hasAll([
          'userId',
          'items',
          'total',
          'status',
          'shippingAddress'
        ]) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.status == 'pending' && // Initial state
        request.resource.data.total is number &&
        request.resource.data.total > 0 &&
        isArray(request.resource.data.items) &&
        request.resource.data.items.size() > 0 &&
        isValidShippingAddress(request.resource.data.shippingAddress);
      }
      
      function isValidShippingAddress(address) {
        return address.keys().hasAll([
          'street',
          'city',
          'state',
          'zipCode',
          'country'
        ]);
      }
    }

    // ===== HELPER FUNCTIONS =====
    function isLoggedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isLoggedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isLoggedIn() && request.auth.token.admin == true;
    }
    
    function isArray(arr) {
      return arr is list;
    }
  }
}